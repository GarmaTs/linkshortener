openapi: 3.0.1
info:
  title: Shop
  version: 1.0.0
components:
  securitySchemes:
    APIKeyHeader:
      type: "apiKey"
      name: "api_key"
      in: "header"
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
    Items:
      type: array
      items:
        $ref: "#/components/schemas/Item"
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        date_created:
          description: Order creation datetime
          type: string
          example: 2022-07-01T15:00:00+01
        ordered_items:
          type: array
          items:
            $ref: "#/components/schemas/Items"
paths:
  /user/login:
    post:
      operationId: loginUser
      tags:
        - User
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      tags:
        - User
      responses:
        200:
          description: successful logout
          content: {}
  /order:
    post:
      summary: Add a new order to the store
      operationId: CreateOrder
      tags:
        - Order
      parameters:
      - name: body
        in: query
        description: Order object that needs to be added to the store
        required: true
        schema:
          $ref: "#/components/schemas/Order"
      responses:
        "405":
          description: Invalid input
        "200":
          description: ok
      security:
      - APIKeyHeader: [admin]
  /order{orderId}:
    get:
      summary: Find order by ID
      operationId: GetOrder
      tags:
        - Order
      parameters:
      - name: orderId
        in: path
        description: ID of order to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
          content: {}
    put:
      summary: Updates an order in the store with form data
      operationId: UpdateOrder
      tags:
        - Order
      parameters:
      - name: orderId
        in: path
        description: ID of order that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
               $ref: "#/components/schemas/Order"
      responses:
        "405":
          description: Invalid input
          content: {}
      security:
        - APIKeyHeader: [admin]
    delete:
      summary: Deletes an order
      operationId: DeleteOrder
      tags:
        - Order
      parameters:
      - name: orderId
        in: path
        description: ID of order to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Order not found
          content: {}
      security:
        - APIKeyHeader: [admin]

  /items:
    get:
      summary: Lists Items with filters
      operationId: ListItems
      tags:
        - Items
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        "400":
          description: Invalid price range
          content: {}
    post:
      summary: Add a new item to the store
      operationId: CreateItem
      tags:
        - Items
      parameters:
      - name: body
        in: query
        description: Item object that needs to be added to the store
        required: true
        schema:
          $ref: "#/components/schemas/Item"
      responses:
        "405":
          description: Invalid input
        "200":
          description: ok
      security:
      - APIKeyHeader: [admin]
  /items/upload_image:
    post:
      summary: uploads an image
      operationId: uploadFile
      tags:
        - Items
      parameters:
      - name: additionalMetadata
        in: query
        description: Additional data to pass to server
        required: true
        content:
          image/png:
            schema:
              type: string
              format: application/octet-stream
      - name: file
        in: query
        description: file to upload
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: ok
      security:
      - APIKeyHeader: [admin]
  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      tags:
        - Items
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: Invalid ID supplied
          content: {}
    put:
      summary: Updates an item in the store with form data
      operationId: UpdateItem
      tags:
        - Items
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        "405":
          description: Invalid input
          content: {}
      security:
        - APIKeyHeader: [admin]
    delete:
      summary: Deletes an item
      operationId: DeleteItem
      tags:
        - Items
      parameters:
      - name: itemId
        in: path
        description: ID of item to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Item not found
          content: {}
      security:
        - APIKeyHeader: [admin]
